{"sample":"**************************************************************************
**                                                                      **
**                909909909   909909909   909909909                     **
**  Roland        909   909   909   909   909   909                     **
**                909   909   909   909   909   909      Copyright      **
**      TR-       909909909   909   909   909909909         1995        **
**                      909   909   909         909                     **
**                      909   909   909         909       Rob Roy       **
**                      909   909   909         909      Recordings     **
**                      909   909909909         909                     **
**                                                     Minneapolis, USA **
**                     Rhythm Composer Samples                          **
**                                                                      **
**************************************************************************

------------
Introduction
------------

Since it's admittance into the world of music, the Roland TR-909 has been
one of the most sought after drum machines in existence.  Every dance, 
techno, and hip-hop artist desperately searches for the "magic box", only
to find the 909.  Yet, this box is highly coveted by those who worship its
demonic powers.  Many have tried to obtain this box through large sums of
money, deceit, and ultimately theft. 

In order to curve the population's insatiable thirst for the 909, I have
created a 'complete' 909 sample set. I'll be surprised if you can tell the 
difference.

For purists, this sample set will not totally replace a real 909.  The 909 
sequencer is really natural for many dance and hip-hop artists.  But
in terms of sound quality, this set accurately reproduces the various
instrument settings on the 909.  In other words, it is the next best 
thing to a real 909.  How many drum machines in the store have a five meg
909 sample set?

I hope you find this set useful.  Please feel free to copy or distribute
the set in any way.  Please DO NOT change samples, add samples,
delete samples, or modify this text file in any way.  Respect the work. 
This sample set is FREE.  You may not distribute these samples for
profit!!   If you have any comments please feel free to email me.
Or, if you create a cool tune using the samples feel free to send me a
tape or dat.  Have fun!

						-Rob Roy/ April 20 '95

Jason Baker
Rob Roy Recordings
818 SE 8th Street #103
Minneapolis, MN 55414  USA
email: bake0028@gold.tc.umn.edu
web: T.B.A. soon!

** Special thanks and greets to fEEd at MANNA STUDIOS, Minneapolis, for 
   providing the TR-909. Check out Manna Studios at the following web
   site: http://www.ivi.com/~robw 

__________________________________________________________________________

Sample set specifications:
--------------------------

160 Samples covering the full 909 kit
	-24 bass drum
	-52 snare drum
	-16 low tom drum
	-16 mid tom drum
	-16 high tom drum
	-2 rim shot
	-2 hand clap
	-6 high hat close
	-6 high hat open
	-6 crash cymbal
	-6 rim cymbal
	-4 open->close high hat combinations
	-4 close->open high hat combinations

Disk space requirement: approx. 4.8 megs unzipped

__________________________________________________________________________
Recording process:
------------------

All samples were recorded in mono at 44.1k using the following process:

909 -------> EMU ESI-32 :::::::::::::> 486PC running Sound Forge 3.0
     mono                sample dump

The process maintained the greatest s/n ration by recording all 
instruments at maximum level (except where noted).  All levels on the
909 were kept at their highest setting.  The samples were normalized in
Sound Forge 3.0.  The sounds were recorded completely dry.
__________________________________________________________________________

Sample Listing Notation
-----------------------

The 909 affords nearly an infinite number of instrument settings.  In 
order to make the "infinite" possible, I used a standard system for
recording each instrument's possible settings.  Each instrument setting
knob on the 909 has 10 decants.  I chose to use the 0, 3, 7 and 10 
settings on each knob to create most instrument variations.  The sample 
listings use the letter "a" to represent 10 (think of 'a' as meaning
'a'll the way).  The high hat and cymbal samples use settings of 0, 2, 4,
6, 8, and 10 for the variations.  

So, for example, when I recorded the bass drum I used the four chosen
decants on three knob settings to create 24 bass drum variations.

For the bass drum and snare drum I eliminated a few settings to reduce
"sonic redundancy".  In the case of the bass drum I only used the
0 and 10 ('a') settings on the attack.  For the snare drum I did not
vary the tone control while the 'snappy' setting was at 0.

After recording and normalizing each sample, I saved the samples in their
respective instrument directories.  Each sample name is composed of an
instrument letter, and knob settings specifications.  

---------------------
Sample Identification
---------------------

Instrument (first letter)       Settings (in order)             Directory

b       bass drum               t=tune, a=attack, d=decay       \bassdm         
s       snare drum              t=tune, t=tone, s=snappy        \snaredm
l       low tom                 t=tune, d=decay                 \lowtomdm
m       mid tom                 t=tune, d=decay                 \midtomdm
h       high tom                t=tune, d=decay                 \hitomdm
rim     rimshot                 #=velocity level                \rimshot
hand    handclap                #=velocity level                \handclap
hhc     closed high hat         d=decay                         \closedhh
hho     open high hat           d=decay                         \openhh
csh     crash cymbal            t=tune                          \crshcym
ride    ride cymbal             t=tune                          \ridecym
clop    closed->open hh         #=combination number            \misc
opcl    open->closed hh         #=combination number            \misc

The best way to figure out what sounds you need is to listen to a variety
of samples.  Better yet, try to create your own personalized set of 909
samples.

Email me at: bake0028@gold.tc.umn.edu if you have any questions!

** 909KIT UPDATE 5/12/95

I cleaned a bunch of sound file headers.  Apparently some .wav file have not
been loading properly on systems.  The new headers contain the proper sound
data information.  
















"}